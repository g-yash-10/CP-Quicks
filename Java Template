import java.util.*;

public class Main {
    static class Pair{
    	int key;
	int val;
	Pair(int key, int val)
	{
		this.key=key;
		this.val=val;
	}
    }
    public static class sort implements Comparator<Pair>{
        @Override
        public int compare(Pair A, Pair B)
        {
            if(A.key>B.key)
                return 1;
            else if(A.key<B.key)
                return -1;
            return 1;
        }
    }
	public static long ModAdd (long x, long y, long mod)
    {
        return ((x % mod) + (y % mod)) % mod;
    }
    public static long ModSub (long x, long y, long mod)
    {
        return ((x % mod) - (y % mod) + mod) % mod;
    }
    public static long ModMul (long x, long y, long mod)
    {
        return ((x % mod) * (y % mod)) % mod;
    }
    public static long ModInv (long num, long mod)
    {
        return modpower(num, mod - 2, mod);
    }
    public static long nCrMod (long n, long r, long mod, long[] fact)
    {
        if (n < r)
        {
            return 0;
        }
        if (r == 0)
        {
            return 1;
        }
        long num = fact[(int)n];
        long den = ModMul (ModInv (fact[(int)r], mod), ModInv(fact[(int)(n - r)], mod), mod);
        return ModMul (num, den, mod);
    }
     static long modpower(long x, long y, long p)
     {
      long res = 1; // Initialize result
   
      x = x % p; // Update x if it is more than or
      // equal to p
   
    
   
      while (y > 0)
      {
   
        // If y is odd, multiply x with result
        if ((y & 1) != 0)
          res = (res * x) % p;
   
        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
      }
      return res;
    }
   static long power(long x, long y)
        {
            long res = 1;     // Initialize result
        
            while (y > 0)
            {
            
                // If y is odd, multiply x with result
                if ((y & 1) != 0)
                    res = res * x;
        
                // y must be even now
                y = y >> 1; // y = y/2
                x = x * x;  // Change x to x^2
            }
            return res;
        }
    static int gcd(int a, int b){
      if (b == 0)
        return a;
      return gcd(b, a % b);
    }
    static int[] nextArray(int n) {
    	int arr[] = new int[n];
	for(int i=0;i<n;i++)	arr[i] = sc.nextInt();
        return arr;
    }
    static long[] nextArrayL(int n) {
    	long arr[] = new long[n];
	for(int i=0;i<n;i++)	arr[i] = sc.nextLong();
        return arr;
    }
    static void print(int arr[]) {
        for(int it: arr)
            System.out.print(it+" ");
        System.out.println();
    }
    static void print(long arr[]) {
        for(long it: arr)
            System.out.print(it+" ");
        System.out.println();
    }
    static void print(int a) {
        System.out.println(a);
    }
    static void print(String a) {
        System.out.println(a);
    }
    static void print(long a) {
        System.out.println(a);
    }
    static Scanner sc = new Scanner(System.in);
    public static void util() {
	// long pow2[] = new long[(int)1e6 + 1];
            // pow2[0] = 1;
            // for (int i=1;i<=(int)1e6;i++)
            // {
            //     pow2[i] = ModMul (pow2[i-1], 2, mod);
            // }
            // long fact[] = new long[(int)1e6 + 1];
            // fact[0] = 1;
            // for (int i=1;i<=(int)1e6;i++)
            // {
            //     fact[i] = ModMul (fact[i-1], i, mod);
            // }
    }
    public static void main (String[] args) {
	int t = 1;
	t = sc.nextInt();
	for(int i=1;i<=t;i++)
	    solve();
    }
    static int mod = 998244353;
    public static void solve()
    {
        int n = sc.nextInt(); 
	String s = sc.next();
        int arr[] = nextArray(n);
    }
}
