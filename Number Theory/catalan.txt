//O(n^2)
static int catalanDP(int n)
{
        int catalan[] = new int[n + 2];
        catalan[0] = 1;
        catalan[1] = 1;
        for (int i = 2; i <= n; i++) {
            catalan[i] = 0;
            for (int j = 0; j < i; j++) {
                catalan[i]
                    += catalan[j] * catalan[i - j - 1];
            }
        }
        return catalan[n];
}

//O(n)-> (2nCn) / (n+1) = nth catalan number
static long binomialCoeff(int n, int k)
    {
        long res = 1;
        if (k > n - k) {
            k = n - k;
        }
        for (int i = 0; i < k; ++i) {
            res *= (n - i);
            res /= (i + 1);
        }
 
        return res;
    }
    static long catalan(int n)
    {
        long c = binomialCoeff(2 * n, n);
        return c / (n + 1);
    }
