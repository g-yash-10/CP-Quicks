static int factorial(int n){
        int res = 1, i;
        for (i = 2; i <= n; i++)
            res *= i;
        return res;
}
/* Function to calculate x raised to the power y in
 * O(logn)*/
static int power(int x, int y)
{
    int temp;
    if (y == 0)
        return 1;
    temp = power(x, y / 2);
    if (y % 2 == 0)
        return temp * temp;
    else
        return x * temp * temp;
}
//O(log(min(a,b)))
static int gcd(int a, int b){
      if (b == 0)
        return a;
      return gcd(b, a % b);
}


// a x b = LCM(a,b) * GCD(a,b)
static int lcm(int a, int b){
        return (a / gcd(a, b)) * b;
}

//O(n)
static long binomialCoeff(int n, int k)
    {
        long res = 1;
        if (k > n - k) {
            k = n - k;
        }
        for (int i = 0; i < k; ++i) {
            res *= (n - i);
            res /= (i + 1);
        }
 
        return res;
    }
    
    public static int lower_bound (long[] arr, long num)
    {
        int n = arr.length, low = 0, high = n - 1, ans = n - 1;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (arr[mid] >= num)
            {
                ans = mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }
        return ans;
    }
    public static int upper_bound (long[] arr, long num)
    {
        int n = arr.length, low = 0, high = n - 1, ans = 0;
        while (low <= high)
        {
            int mid = (low + high) / 2;
            if (arr[mid] <= num)
            {
                ans = mid;
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return ans;
    }
