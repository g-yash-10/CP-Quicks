static int factorial(int n){
        int res = 1, i;
        for (i = 2; i <= n; i++)
            res *= i;
        return res;
}

//O(log(min(a,b)))
static int gcd(int a, int b){
      if (b == 0)
        return a;
      return gcd(b, a % b);
}


// a x b = LCM(a,b) * GCD(a,b)
static int lcm(int a, int b){
        return (a / gcd(a, b)) * b;
}

//O(n)
static long binomialCoeff(int n, int k)
    {
        long res = 1;
        if (k > n - k) {
            k = n - k;
        }
        for (int i = 0; i < k; ++i) {
            res *= (n - i);
            res /= (i + 1);
        }
 
        return res;
    }
    
    
    static int lower_bound(int array[], int key)
    {
        // Initialize starting index and
        // ending index
        int low = 0, high = array.length;
        int mid;
 
        // Till high does not crosses low
        while (low < high) {
 
            // Find the index of the middle element
            mid = low + (high - low) / 2;
 
            // If key is less than or equal
            // to array[mid], then find in
            // left subarray
            if (key <= array[mid]) {
                high = mid;
            }
 
            // If key is greater than array[mid],
            // then find in right subarray
            else {
 
                low = mid + 1;
            }
        }
 
        // If key is greater than last element which is
        // array[n-1] then lower bound
        // does not exists in the array
        if (low < array.length && array[low] < key) {
            low++;
        }
 
        // Returning the lower_bound index
        return low;
    }
